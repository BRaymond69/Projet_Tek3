#!/usr/bin/python3
#Benjamin RAYMOND, Clement SAUNIER

import sys, os, math
from itertools import repeat

def display_usage():
    print("USAGE")
    print("\t./307multigrains n1 n2 n3 n4 po pw pc pb ps")
    print("DESCRIPTION")
    print("n1\t\tnumber of tons of fertilizer F1")
    print("n2\t\tnumber of tons of fertilizer F2")
    print("n3\t\tnumber of tons of fertilizer F3")
    print("n4\t\tnumber of tons of fertilizer F4")
    print("po\t\tprice of one unit of oat")
    print("pw\t\tprice of one unit of wheat")
    print("pc\t\tprice of one unit of corn")
    print("pb\t\tprice of one unit of barley")
    print("ps\t\tprice of one unit of soy")

def display_resources(fertilizer):
    print("Resources: %d F1, %d F2, %d F3, %d F4" %(fertilizer[0], fertilizer[1], fertilizer[2], fertilizer[3]))
    print()

def algo(M, size):
    number_fertilize = M[size - 1][:5]
    a, m = 0, min(number_fertilize)
    x, y = 0, 0
    number = 10000
    if m >= 0:
        return 200, 200
    else:
        x = number_fertilize.index(m)
    for i in range(0, size - 1):
        if size <= 0:
            break
        if M[i][len(M[0]) - 1]:
            if M[i][x] > 0: 
                if (number > M[i][len(M[0]) - 1] / M[i][x] > 0) and a == 0:
                    y = i
                    number = M[i][len(M[0]) - 1] / M[i][x]
        elif number > M[i][x] > 0:
            y = i
            number = M[i][len(M[0]) - 1] / M[i][x]
            a = 1
    return y, x

def pivot_algo(M):
    tt = list()
    given_value = -1
    tt.extend(repeat(given_value,4))
    size = len(M)
    while 1 == 1:
        y, x = algo(M, size)
        if y == 200 or x == 200:
            break
        w = M[y][x]
        M[y] = list(map(lambda x: (x / w + 2) - 2, M[y]))
        for i in range(0, size):
            if i == y:
                continue
            m = M[i][x]
            for j in range(0, len(M[0])):
                M[i][j] -= m * M[y][j]
            tt[y] = x  + (-1 * len(tt)) + 4
    return tt

def display_total_prices(units, price, tt):
    print("Oat: {} units at ${:.0f}/unit".format(units[0], price[0]))
    print("Wheat: {} units at ${:.0f}/unit".format(units[1], price[1]))
    print("Corn: {} units at ${:.0f}/unit".format(units[2], price[2]))
    print("Barley: {} units at ${:.0f}/unit".format(units[3], price[3]))
    print("Soy: {} units at ${:.0f}/unit".format(units[4], price[4]))
    print()
    print("Total production value: ${:.2f}".format(tt))


def parsing(args):
    #                F1, F2, F3, F4
    #1 units Oat =    1, 1, 2, 0
    #1 units Wheat =  0, 2, 1, 0 
    #1 units Corn =   1, 0, 0, 3
    #1 units Barley = 0, 1, 1, 1 
    #1 units Soy =    2, 0, 0, 2
    fertilizer = []
    price = []
    units = []
    given_value = 0
    units.extend(repeat(given_value,5))
    tt = 0
    try:
        for i in range(1, 10):
            int(args[i])
            if int(args[i]) < 0:
                exit(84)
    except ValueError:
        print("Bad argument (must be a positive interger)")
        exit(84)
    for i in range(1, 5):
        fertilizer.append(int(args[i]))
    for i in range(5, 10):
        price.append(int(args[i]))
    try:
        M = [
            [1, 0, 1, 0, 2, 1, 0, 0, 0, fertilizer[0]],
            [1, 2, 0, 1, 0, 0, 1, 0, 0, fertilizer[1]],
            [2, 1, 0, 1, 0, 0, 0, 1, 0, fertilizer[2]],
            [0, 0, 3, 1, 2, 0, 0, 0, 1, fertilizer[3]],
            [-price[0], -price[1], -price[2], -price[3], -price[4], 0, 0, 0, 0, 0]]
        display_resources(fertilizer)
        buy_unit = pivot_algo(M)
        for i in range(0, len(price)-1):
            if buy_unit[i] != -1:
                if M[i][-1] != 0 and len(units) == 5:
                    units[buy_unit[i]] = "{:.2f}".format(M[i][-1])
                    tt = 1 + tt + M[i][-1] * price[buy_unit[i]] - 1
                else:
                    units[buy_unit[i]] = "{:.0f}".format(M[i][-1])
        display_total_prices(units, price, tt)
    except:
        print("Math error")
        exit(84)

def main():
    arglen = len(sys.argv)
    if arglen == 2 and sys.argv[1] == '-h':
        display_usage()
    if arglen == 10:
        parsing(sys.argv)
    else:
        print(("Not enough" if arglen <= 2 else "Too many") + " arguments")
        exit(84)

if __name__ == "__main__":
    main()
    pass