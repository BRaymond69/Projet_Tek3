#!/usr/bin/python3
#Benjamin RAYMOND, Clement SAUNIER

import sys, os, math

abscissa = [0, 5, 10, 15, 20]

def display_usage():
    print("USAGE")
    print("\t./308reedpipes r0 r5 r10 r15 r20 n")
    print("DESCRIPTION")
    print("r0\t\t radius (in cm) of pipe at the 0cm abscissa")
    print("r5\t\t radius (in cm) of pipe at the 5m abscissa")
    print("r10\t\t radius (in cm) of pipe at the 10cm abscissa")
    print("r15\t\t radius (in cm) of pipe at the 15cm abscissa")
    print("r20\t\t radius (in cm) of pipe at the 20cm abscissa")
    print("n\t\tnumber of points needed to display the radius")


def parsing(args):
    arg = args[1:]
    try:
        for i in range(len(arg)):
            if float(arg[i]) <= 0:
                exit(84)
    except:
        exit(84)
    ordinate = [float(arg[0]), float(arg[1]), float(arg[2]), float(arg[3]), float(arg[4])]
    dico =  {'r0': float(arg[0]), 'r5': float(arg[1]), 'r10': float(arg[2]), 'r15': float(arg[3]), 'r20': float(arg[4]), 'n': float(arg[5])}
    return(dico, ordinate)

def spline(dico, ordinate):
    result = []
    vector = [0, None, None, None, 0]
    A = 6 * (dico['r10'] - 2 * dico['r5'] + dico['r0']) / 50
    B = 6 * (dico['r15'] - 2 * dico['r10'] + dico['r5']) / 50
    C = 6 * (dico['r20'] - 2 * dico['r15'] + dico['r10']) / 50
    vector[2] = (B - (A + C) / 4) * 4 / 7
    vector[1] = A / 2 - 0.25 * vector[2]
    vector[3] = C / 2 - 0.25 * vector[2]
    for d in range(int(dico['n'])):
        X = 20 / (dico['n'] - 1) * d
        i = int((X - 0.01) / 5) + 1
        total = (- vector[i - 1] / 30 * pow(X - abscissa[i], 3) + vector[i] / 30 * pow(X - abscissa[i - 1], 3)
          - (ordinate[i - 1] / 5 - 5 / 6 * vector[i - 1]) * (X - abscissa[i]) + (ordinate[i] / 5 - 5 / 6 * vector[i]) * (X - abscissa[i - 1]))
        result.append(total)
    display_value(vector, result, dico)
    
def display_value(vector, result, dico):
    for i in range(len(vector)):
        if round(vector[i], 1) != 0:
            vector[i] = round(vector[i], 1)
        else:
            vector[i] = 0
    print("vector result: [{:.1f}, {:.1f}, {:.1f}, {:.1f}, {:.1f}]".format(vector[0],vector[1],vector[2],vector[3],vector[4]))
    for i in range(int(dico['n'])):
        print("abscissa: {:.1f} cm\tradius: {:.1f} cm".format(20 / (dico['n'] - 1) * i, result[i]))   
    

def main():
    arglen = len(sys.argv)
    if arglen == 2 and sys.argv[1] == '-h':
        display_usage()
    if arglen == 7:
        dico, ordinate = parsing(sys.argv)
        spline(dico, ordinate)
    else:
        print(("Not enough" if arglen <= 2 else "Too many") + " arguments")
        exit(84)

if __name__ == "__main__":
    main()
    pass